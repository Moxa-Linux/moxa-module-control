#!/bin/bash -e

# SPDX-License-Identifier: Apache-2.0
#
# Name:
#	MOXA Module Control Utility
#
# Description:
#	Utility for controlling modules.
#
# Copyright (C) Moxa, Inc. All rights reserved.
# Copyright (C) 2018-2019	Ken CJ Chou	<KenCJ.Chou@moxa.com>
#

VERSION=1.3.2
CONFIG_FILE=/etc/moxa-configs/moxa-module-control.conf
MODULE_STATUS_DIR=/etc/moxa-module-control/status.d

#
# Common functions
#
_is_number() {
	local input=${1}
	local num_regex='^[0-9]+$'

	if [ -z "${input}" ]; then
		return 1
	fi

	if ! [[ ${input} =~ ${num_regex} ]]; then
		return 1
	fi
	return 0
}

_is_slot_valid() {
	local slot=${1}

	if ! _is_number "${slot}"; then
		return 1
	fi

	if [ ${slot} -le 0 ] || [ ${slot} -gt ${NUM_OF_MODULE_SLOTS} ]; then
		return 1
	fi
	return 0
}

_set_gpio() {
	local gpio=${1}
	local direction=${2}
	local value=${3}

	if [ ! -e "/sys/class/gpio/gpio${gpio}" ]; then
		echo "${gpio}" > "/sys/class/gpio/export"
		echo "${direction}" > "/sys/class/gpio/gpio${gpio}/direction"
	fi
	if [ X"${direction}" == X"out" ]; then
		echo "${value}" > "/sys/class/gpio/gpio${gpio}/value"
	fi
}

#
# Functions
#
usage() {
	echo -e "Usage:"
	echo -e "	mx-module-ctl [Options]"
	echo -e ""
	echo -e "Operations:"
	echo -e "	-v,--version"
	echo -e "		Show utility version"
	echo -e "	-s,--slot <module_slot_id>"
	echo -e "		Select slot"
	echo -e "	-p,--power on|off"
	echo -e "		Power on/off module"
	echo -e "	-r,--reset on|off"
	echo -e "		Reset module"
	echo -e "	-i,--sim 1|2"
	echo -e "		Select sim card slot"
	echo -e ""
	echo -e "Example:"
	echo -e "	Power on module 1"
	echo -e "	# mx-module-ctl -s 1 -p on"
	echo -e ""
	echo -e "	Reset module 2"
	echo -e "	# mx-module-ctl -s 2 -r on"
	echo -e ""
	echo -e "	Select SIM 2 for module 1"
	echo -e "	# mx-module-ctl -s 1 -i 2"
}

load_config() {
	if [ ! -f "${CONFIG_FILE}" ]; then
		echo "Error: config file \`${CONFIG_FILE}\` not found." >&2
		return 1
	fi
	source "${CONFIG_FILE}"

	if [ -z "${NUM_OF_MODULE_SLOTS}" ] || ! _is_number "${NUM_OF_MODULE_SLOTS}"; then
		echo "Error: Can not load number of module slots." >&2
		return 1
	fi
}

do_action() {
	local action=${1}
	local slot=${2}
	local act_arg=${3}

	# Actions that doesn't need slot ID
	if [ "${action}" == "NONE" ]; then
		echo "Moxa module control utility"
		echo "Version: ${VERSION}"
		echo "---------------------------"
		usage
		return 0
	fi

	# Check if slot ID is valid
	if [ ${NUM_OF_MODULE_SLOTS} -eq 0 ]; then
		echo "No module slot on this device." >&2
		return 1
	fi
	if ! _is_slot_valid "${slot}"; then
		echo "Error: Invalid slot index: ${slot}" >&2
		return 1
	fi

	# Actions that need slot ID
	if [ "${action}" == "POWER" ]; then
		if [ "${act_arg}" == "on" ]; then
			module_power_on "${slot}"
		elif [ "${act_arg}" == "off" ]; then
			module_power_off "${slot}"
		else
			echo "Error: Unknown power action: ${act_arg}" >&2
			return 1
		fi
	elif [ "${action}" == "RESET" ]; then
		if [ "${act_arg}" == "on" ]; then
			module_reset_on "${slot}"
		elif [ "${act_arg}" == "off" ]; then
			module_reset_off "${slot}"
		else
			echo "Error: Unknown reset action: ${act_arg}" >&2
			return 1
		fi
	elif [ "${action}" == "SWITCH_SIM" ]; then
		if [ "${act_arg}" != "1" ] && [ "${act_arg}" != "2" ]; then
			echo "Error: Invalid sim slot number: ${act_arg}" >&2
			return 1
		fi
		module_switch_sim "${slot}" "${act_arg}"
	else
		echo "Error: Unknown action: ${action}" >&2
		echo "Please run \`mx-module-ctl -h\` for help." >&2
		return 1
	fi
}

main() {
	local slot=1
	local action="NONE"
	local act_arg

	while true; do
		case "${1}" in
		"-v"|"--version")
			echo "Version: ${VERSION}"
			return 0
			;;
		"-h"|"--help")
			usage
			return 0
			;;
		"-s"|"--slot")
			slot=${2}
			shift 2
			;;
		"-p"|"--power")
			action="POWER"
			act_arg=${2}
			shift 2
			;;
		"-r"|"--reset")
			action="RESET"
			act_arg=${2}
			shift 2
			;;
		"-i"|"--sim")
			action="SWITCH_SIM"
			act_arg=${2}
			shift 2
			;;
		"")
			break
			;;
		*)
			echo "Error: Unknown option: ${1}" >&2
			echo "Please run \`mx-module-ctl -h\` for help." >&2
			return 1
			;;
		esac
	done

	load_config
	do_action "${action}" "${slot}" "${act_arg}"
}

main "$@"
exit 0
